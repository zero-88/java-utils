name: build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'CHANGELOG.md'
      - 'README.md'
      - 'LICENSE'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ master ]

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check.outputs.branch }}
      isOnMaster: ${{ steps.check.outputs.isOnMaster }}
      isSkipPublish: ${{ steps.check.outputs.isSkipPublish }}
      isPR: ${{ steps.check.outputs.isPR }}
      isReleasePR: ${{ steps.check.outputs.isReleasePR }}
      version: ${{ steps.checkVersion.outputs.version }}
      semanticVersion: ${{ steps.checkVersion.outputs.semanticVersion }}
      shouldBuild: ${{ steps.checkVersion.outputs.isSameVersion == 'true' && steps.check.outputs.isAfterReleaseMerged == 'false' }}

    steps:
      - name: debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Check
        id: check
        shell: bash
        run: |
          commitMsg="${{ github.event.head_commit.message }}"
          isOnMaster=${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
          isReleaseCommit=$(echo $commitMsg | grep -P -q '^Merge pull request #\d+ from .+/release/.+$' && echo 1 || echo 0)
          isSkipPublish=$(echo $commitMsg | grep -P -q '^<skip_publish>.+$' && echo true || echo false)
          [[ $isOnMaster == true && $isReleaseCommit == 1 ]] && isAfterReleaseMerged=true || isAfterReleaseMerged=false
          isPR=${{ github.event_name == 'pull_request' }}
          isReleasePR=${{ github.event_name == 'pull_request' && startsWith(github.head_ref, 'release/') }}
          [[ $isOnMaster == true ]] && branch="master" || branch="${{ github.head_ref }}"

          echo "Information:"
          echo "- Is on master? $isOnMaster"
          echo "- Is skip publish? $isSkipPublish"
          echo "- Is after release merged? $isAfterReleaseMerged"
          echo "- Is PR? $isPR"
          echo "- Is Release PR? $isReleasePR"
          echo "- Branch? $branch"

          echo ::set-output name=branch::$branch
          echo ::set-output name=isOnMaster::$isOnMaster
          echo ::set-output name=isSkipPublish::$isSkipPublish
          echo ::set-output name=isPR::$isPR
          echo ::set-output name=isReleasePR::$isReleasePR
          echo ::set-output name=isAfterReleaseMerged::$isAfterReleaseMerged


      - uses: actions/checkout@v2
        if: steps.check.outputs.isReleasePR == 'false'

      - uses: actions/checkout@v2
        if: steps.check.outputs.isReleasePR == 'true'
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.OSS_GITHUB_TOKEN }}

      - name: Correct version if any
        id: checkVersion
        shell: bash
        run: |
          cfgVer=$(grep version gradle.properties | cut -d'=' -f2)
          cfgSemantic=$(grep semanticVersion gradle.properties | cut -d'=' -f2)
          version=$(${{ steps.check.outputs.isReleasePR }} == true && echo $(echo "${{ github.head_ref }}" | sed -e"s#release/##") || echo $cfgVer)
          semanticVersion=$(${{ steps.check.outputs.isReleasePR }} == true && echo "" || echo $cfgSemantic)
          [[ "$cfgVer$cfgSemantic" == "$version$semanticVersion" ]] && same=true || same=false

          echo "Verify:"
          echo "- Is correct version? $same"
          [[ $same == false && ${{ steps.check.outputs.isReleasePR }} == false ]] && { echo "Version is changed without release branch"; exit 1; }

          echo "Correct version..."
          sed -i -e "s/version=.*/version=$version/g" gradle.properties
          sed -i -e "s/semanticVersion=.*/semanticVersion=$semanticVersion/g" gradle.properties

          echo ::set-output name=version::$version
          echo ::set-output name=semanticVersion::$semanticVersion
          echo ::set-output name=isSameVersion::$same

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        if: ${{ steps.checkVersion.outputs.isSameVersion == 'false' }}
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.CI_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.CI_GPG_PASSPHARSE }}

      - name: GIT commit and push
        if: ${{ steps.checkVersion.outputs.isSameVersion == 'false' }}
        run: |
          git commit -S -am "<ci-auto-commit> Correct version"
          git show --shortstat --show-signature
          git push


  build:
    runs-on: ubuntu-latest
    needs: context
    if: needs.context.outputs.shouldBuild == 'true' && (needs.context.outputs.isPR != 'true' || github.event.action != 'closed')
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build
        run: |
          ./gradlew clean build -x test \
                          -Pversion=${{ needs.context.outputs.version }} \
                          -PsemanticVersion=${{needs.context.outputs.semanticVersion }} \
                          -PbuildBy="GitHub Action" -PbuildHash=${{ github.sha }}

      - name: Test
        run: ./gradlew test jacocoTestReport

#       - name: SonarQube
#         if: needs.context.outputs.isSkipPublish != 'true'
#         run: ./gradlew sonarqube -Dsonar.login=${{ secrets.OSS_SONARQUBE_TOKEN }} -Dsonar.branch.name=${{ needs.context.outputs.branch }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Cache SonarCloud packages
#         if: needs.context.outputs.isSkipPublish != 'true'
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        if: needs.context.outputs.isOnMaster == 'true' && needs.context.outputs.isSkipPublish != 'true'
        with:
          git_user_signingkey: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.CI_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.CI_GPG_PASSPHARSE }}

#       - name: Publish GitHub Package
#         if: needs.context.outputs.isOnMaster == 'true' && needs.context.outputs.isSkipPublish != 'true'
#         run: |
#           ./gradlew publish -Psigning.gnupg.homeDir=/home/runner/.gnupg \
#                             -Psigning.gnupg.keyName=${{ steps.import_gpg.outputs.keyid }} \
#                             -Psigning.gnupg.passphrase=${{ secrets.CI_GPG_PASSPHARSE }} \
#                             -Pgithub \
#                             -Pnexus.username=${{ github.repository_owner }} \
#                             -Pnexus.password=${{ secrets.OSS_GITHUB_TOKEN }}

      - name: Publish Sonatype OSSRH
        if: needs.context.outputs.isOnMaster == 'true' && needs.context.outputs.isSkipPublish != 'true'
        run: |
          ./gradlew publish -Psigning.gnupg.homeDir=/home/runner/.gnupg \
                            -Psigning.gnupg.keyName=${{ steps.import_gpg.outputs.keyid }} \
                            -Psigning.gnupg.passphrase=${{ secrets.CI_GPG_PASSPHARSE }} \
                            -Pnexus.username=${{ secrets.OSS_SONATYPE_USER }} \
                            -Pnexus.password=${{ secrets.OSS_SONATYPE_PASSWORD }}

  tag:
    runs-on: ubuntu-latest
    needs: context
    if: needs.context.outputs.isReleasePR == 'true' && github.event.action == 'closed' && github.event.pull_request.merged
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.OSS_GITHUB_TOKEN }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.CI_GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.CI_GPG_PASSPHARSE }}

      - name: GIT tag
        run: |
          version="v${{ needs.context.outputs.version }}${{ needs.context.outputs.semanticVersion }}"
          git tag -s $version ${{ github.sha }} -m "Release $version"
          git show --shortstat --show-signature $version
          git push origin $version
